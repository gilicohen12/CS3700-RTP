#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

DATA_SIZE = 1375
RTT = 1
WINDOW_SIZE = 4

class Sender:
    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False
        
        self.history = []
        self.seq_num = 1
        

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))
        
    def read(self, stdin):
        data = sys.stdin.read(DATA_SIZE)
        if len(data) == 0 and len(self.history) == 0:
            self.log("All done!")
            sys.exit(0)
        return data
    
    def receive(self, socket):
        socket.settimeout(0.2)
        
        try:
            while len(self.history) != 0:
                k, addr = socket.recvfrom(65535)
                self.log("%s" % k)
                msg = json.loads(k.decode('utf-8'))
                self.log("Received message '%s'" % msg)
                self.log("Current History: %s" % self.history)
                for entry in self.history:
                    recv_num = msg["hdr"]["ack"]
                    sent_num = entry[2]
                    self.log("Comparing sequence number: %i & %i" % (int(recv_num), sent_num))
                    if recv_num == sent_num:
                        self.log("Removed message '%s' from History." % entry[0])
                        self.history.remove(entry)
                self.log("Updated History: %s" % self.history)
                
        except:
            self.log("Done collecting data.")
        

    def run(self):
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]

            socks = select.select(sockets, [], [], 0.1)[0]
            for conn in socks:
                if conn == self.socket:
                    self.receive(conn)
                    #map(self.resend, self.history)

                    self.waiting = False
                elif conn == sys.stdin:
                    for i in range(WINDOW_SIZE):
                        data = self.read(conn)

                        if data:
                            msg = self.assemble(data)
                            self.increment(msg)
                            self.archive(msg)
                            
                            self.log("Sending message '%s'" % msg)
                            self.send(msg)
                        self.waiting = True

        return
    
    def assemble(self, data):
        msg = { "hdr": {
                        "seq": self.seq_num,
                        },
               "msg": {
                        "type": "msg",
                        "data": data,
                        }
               }
        return msg
    
    def increment(self, msg):
        self.seq_num += sys.getsizeof(msg)
        if self.seq_num > 65535:
            self.seq_num -= 65535
    
    def archive(self, msg):
        self.log("Adding message to history %s" % msg)
        entry = (msg, time.time(), self.seq_num)
        self.history.append(entry)
    
    def resend(self, entry):
        current_time = time.time()
        time_sent = entry[1]
        msg = entry[0]
        
        if current_time - time_sent > RTT:
            self.log("------Resending------")
            self.send(msg)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()