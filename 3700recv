#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
import hashlib

class Receiver:
    MESSAGE = bytes(b'\x00')
    ACK = bytes(b'\x01')

    CHECKSUM_SIZE = 20  # SHA-1 digest size

    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None

        self.received_data = {}
        self.next_print = 0

    def send(self, type: bytes, seq_num: bytes, message: str):
        header = type + seq_num
        message_bytes = message.encode('utf-8')
        checksum = self.add_checksum(header + message_bytes)
        self.socket.sendto(checksum, (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def seq_from(self, msg: bytes) -> int:
        return int.from_bytes(byteorder='big', bytes=msg[1:3])

    def add_checksum(self, b: bytes) -> bytes:
        return b + hashlib.sha1(b).digest()

    def verify_checksum(self, b: bytes) -> bool:
        received_digest = b[-self.CHECKSUM_SIZE:]
        calculated_digest = hashlib.sha1(b[:-self.CHECKSUM_SIZE]).digest()
        return received_digest == calculated_digest

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                if self.verify_checksum(data) and data[0:1] == self.MESSAGE:

                    seq = self.seq_from(data)
                    if seq not in self.received_data.keys():
                        self.received_data[seq] = data[3:-self.CHECKSUM_SIZE].decode('utf-8')

                    if seq == self.next_print:
                        while self.next_print in self.received_data.keys():
                            # Print the data to stdout
                            print(self.received_data[self.next_print], end='', flush=True)
                            self.next_print += 1

                    # Always send back an ack
                    self.send(self.ACK, data[1:3], "")
                else:
                    self.log("Received bad data message %s" % data)
        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    receiver = Receiver()
    receiver.run()
