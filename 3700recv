#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
import hashlib

class Receiver:
    """
    UDP receiver class for receiving and processing data messages.
    """

    MESSAGE = bytes(b'\x00')
    ACK = bytes(b'\x01')

    CHECKSUM_SIZE = 20  # SHA-1 digest size

    def __init__(self):
        """
        Initialize the Receiver.

        Creates a UDP socket and binds it to an available port.
        """
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None

        self.received_messages = {}
        self.next_sequence = 0

    def send(self, message_type, sequence, message):
        """
        Send a message.

        Args:
            msg_type (bytes): Type of message (MESSAGE or ACK).
            seq_num (bytes): Sequence number of the message.
            msg (str): The message content.
        """
        checksum = self.append_checksum(message_type + sequence + message.encode('utf-8'))
        self.socket.sendto(checksum, (self.remote_host, self.remote_port))

    def log(self, msg):
        """
        Log a message to stderr.

        Args:
            message (str): The message to log.
        """
        sys.stderr.write(msg + "\n")
        sys.stderr.flush()

    def extract_sequence(self, message_bytes):
        """
        Extracts a sequence number from a message.

        Args:
            msg (bytes): The message containing the sequence number.

        Returns:
            int: The extracted sequence number.
        """
        sequence_bytes = message_bytes[1:3]
        sequence_number = int.from_bytes(sequence_bytes, byteorder='big')
        return sequence_number

    def append_checksum(self, message_bytes):
        """
        Appends a SHA-1 checksum to the given bytes.

        Args:
            msg_bytes (bytes): The bytes to append the checksum to.

        Returns:
            bytes: The input bytes with the SHA-1 checksum appended.
        """
        return message_bytes + hashlib.sha1(message_bytes).digest()

    def validate_checksum(self, message_bytes):
        """
        Validates the SHA-1 checksum of the given bytes.

        Args:
            data_bytes (bytes): The bytes to validate.

        Returns:
            bool: True if the checksum is valid, False otherwise.
        """
        return message_bytes[-self.CHECKSUM_SIZE:] == hashlib.sha1(message_bytes[:-self.CHECKSUM_SIZE]).digest()

    def run(self):
        """
        Main loop for receiving and processing messages.
        """
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                if self.validate_checksum(data) and data[0:1] == self.MESSAGE:

                    sequence = self.extract_sequence(data)
                    if sequence not in self.received_messages.keys():
                        self.received_messages[sequence] = data[3:-self.CHECKSUM_SIZE].decode('utf-8')

                    if sequence == self.next_sequence:
                        while self.next_sequence in self.received_messages.keys():
                            print(self.received_messages[self.next_sequence], end='', flush=True)
                            self.next_sequence += 1

                    self.send(self.ACK, data[1:3], "")
                else:
                    self.log("Bad message: %s" % data)
        return
    
    

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    receiver = Receiver()
    receiver.run()
