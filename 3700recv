#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

WINDOW_SIZE = 4

class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None
        
        self.ack_num = 1
        self.buffer = []
        self.check_list = []

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()
        
    def check_buffer(self, msg):
        if int(msg["hdr"]["seq"]) not in self.check_list:
            self.check_list.append(int(msg["hdr"]["seq"]))
            self.buffer.append(msg)
            self.log("Received data message %s" % msg)
        else:
            self.log("Duplicate Detected: %s" % msg)
            

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                conn.settimeout(1)
                try:
                    while len(self.buffer) < WINDOW_SIZE:
                        self.log("Attempting to collect data...")
                        self.log("Current buffer list: %s" % self.buffer)
                        
                        data, addr = conn.recvfrom(65535)
                        msg = json.loads(data.decode('utf-8'))
                        self.check_buffer(msg)
                        
                        self.log("Updated buffer list: %s" % self.buffer)

                        if self.remote_host is None:
                            self.remote_host = addr[0]
                            self.remote_port = addr[1]    
                except:
                    self.log("Booted from Loop.")
                    
                self.log("Sorting the receiver buffer...")        
                #self.log("Unsorted buffer list: %s" % self.buffer)  
                            
                self.buffer = sorted(self.buffer, key=lambda x: x["hdr"]["seq"])
                
                #self.log("Sorted buffer list: %s" % self.buffer) 
                
                for msg in self.buffer: 
                    self.log("Comparing sequence number: %i & %i" % (int(msg["hdr"]["seq"]), self.ack_num))
                    if int(msg["hdr"]["seq"]) >= self.ack_num:
                        print(msg["msg"]["data"], end='', flush=True)
                        
                        ack = self.ack(sys.getsizeof(msg))
                        self.log("Sending acknowlegdment '%s'" % ack)
                        self.send(ack)
                    else:
                        self.log("Duplicate Detected: %s" % msg)
                        
                self.buffer = []
                self.check_list = []


        return
    
    def ack(self, msg_size: int) -> dict:
        datagram = {
            "hdr": {
                "ack": self.ack_num + msg_size,
            },
            "msg": {
                "type": "ack",
            }
        }
        self.ack_num += msg_size
        return datagram

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()