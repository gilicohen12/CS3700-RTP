#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, hashlib

CHECKSUM_SIZE = 20
LOGGING = True

class Receiver:
    """
    UDP receiver class for receiving and processing data messages.

    Attributes:
    - ACK (bytes): ACK message identifier.

    Methods:
    - __init__(self): Constructor method to initialize the Receiver object.
    - send(self, message_type, sequence, message): Send a message, including ACKs.
    - log(self, msg): Log a message to stderr if logging is enabled.
    - extract_sequence(self, message_bytes): Extract a sequence number from a message.
    - append_checksum(self, message_bytes): Append a SHA-1 checksum to the given bytes.
    - validate_checksum(self, message_bytes): Validate the SHA-1 checksum of the given bytes.
    - investigate(self, message_bytes): Check if the received message is corrupted.
    - identify(self, sequence, message_bytes): Check if the message is unique and store it.
    - run(self): Main loop for receiving and processing messages.

    """

    ACK = bytes(b'\x01')

    def __init__(self):
        """
        Initialize the Receiver.

        Creates a UDP socket and binds it to an available port.
        """
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None

        self.received_messages = {}
        self.next_sequence = 0

    def send(self, message_type, sequence, message):
        """
        Send a message.

        Parameters:
        - message_type (bytes): Type of message (MESSAGE or ACK).
        - sequence (bytes): Sequence number of the message.
        - message (str): The message content.
        """
        ack = self.append_checksum(message_type + sequence + message.encode('utf-8'))
        self.socket.sendto(ack, (self.remote_host, self.remote_port))
        self.log("Sending ACK %s..." % (ack))

    def log(self, msg):
        """
        Log a message to stderr if logging is enabled.

        Parameters:
        - msg (str): The message to log.
        """
        if LOGGING:
            sys.stderr.write(msg + "\n")
            sys.stderr.flush()

    def extract_sequence(self, message_bytes):
        """
        Extracts a sequence number from a message.

        Parameters:
        - message_bytes (bytes): The message containing the sequence number.

        Returns:
        - int: The extracted sequence number.
        """
        self.log("Extracting the sequence...")
        return int.from_bytes(message_bytes[1:3], byteorder='big')

    def append_checksum(self, message_bytes):
        """
        Appends a SHA-1 checksum to the given bytes.

        Parameters:
        - message_bytes (bytes): The bytes to append the checksum to.

        Returns:
        - bytes: The input bytes with the SHA-1 checksum appended.
        """
        return message_bytes + hashlib.sha1(message_bytes).digest()

    def validate_checksum(self, message_bytes):
        """
        Validates the SHA-1 checksum of the given bytes.

        Parameters:
        - message_bytes (bytes): The bytes to validate.

        Returns:
        - bool: True if the checksum is valid, False otherwise.
        """
        return message_bytes[-CHECKSUM_SIZE:] == hashlib.sha1(message_bytes[:-CHECKSUM_SIZE]).digest()

    def investigate(self, message_bytes):
        """
        Check if the received message is corrupted.

        Parameters:
        - message_bytes (bytes): The received message.

        Returns:
        - bool: True if the message is not corrupted, False otherwise.
        """
        return self.validate_checksum(message_bytes)

    def identify(self, sequence, message_bytes):
        """
        Check if the message is unique and store it.

        Parameters:
        - sequence (int): The sequence number of the message.
        - message_bytes (bytes): The received message.
        """
        self.log("Checking if message is unique...")
        if sequence not in self.received_messages.keys():
            self.log("Unique message detected %s at %i..." % (message_bytes, sequence))
            self.received_messages[sequence] = message_bytes[3:-CHECKSUM_SIZE].decode('utf-8')

    def run(self):
        """
        Main loop for receiving and processing messages.
        """
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                if self.investigate(data):
                    self.log("Bytes were not corrupted...")
                    sequence = self.extract_sequence(data)
                    self.log("Extracted Sequence was %i..." % (sequence))
                    self.identify(sequence, data)
                    self.log("Comparing Sequence %i to %i" % (sequence, self.next_sequence))
                    if sequence == self.next_sequence:
                        while self.next_sequence in self.received_messages.keys():
                            self.log("Found next Sequence...")
                            print(self.received_messages[self.next_sequence], end='', flush=True)
                            self.log("Printing...")
                            self.next_sequence += 1

                    self.send(self.ACK, data[1:3], "")
                else:
                    self.log("Corrupted message: %s" % data)
        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    receiver = Receiver()
    receiver.run()
